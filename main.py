import re
from pcfg import PRule, PCFG


def get_PCFG():
    grammar_text = open("grammar.txt")
    grammar_string = grammar_text.read()
    grammar_text.close()
    start_line_list = re.findall('^start_variable .*$', grammar_string, re.MULTILINE)
    start_variable = start_line_list[0].split()[1]
    rules_list = re.findall('^.* -> .*$', grammar_string, re.MULTILINE)
    variable_set = set()
    prule_list = []
    for rule in rules_list:
        split_rule_list = re.split(' -> ', rule)
        variable_set.add(split_rule_list[0])
        if '|' not in split_rule_list[1]:
            split_derivation_p_list = split_rule_list[1].split()
            derivation_list = []
            for i in range(0, len(split_derivation_p_list)-1):
                derivation_list.append(split_derivation_p_list[i].replace('"', ''))
            derivation = derivation_list
            p_string = split_derivation_p_list[len(split_derivation_p_list)-1]
            p = re.findall('0\.[0-9]+|1', p_string)[0]
            prule = PRule(split_rule_list[0], derivation, p)
            prule_list.append(prule)
        else:
            split_into_rules = split_rule_list[1].split(' | ')
            for derivation_string in split_into_rules:
                split_derivation_p_list = derivation_string.split()
                derivation = [split_derivation_p_list[0].replace('"', '')]
                p_string = split_derivation_p_list[1]
                p = re.findall('0\.[0-9]+|1', p_string)[0]
                prule = PRule(split_rule_list[0], derivation, p)
                prule_list.append(prule)
    rules_dictionary = {}
    for variable in variable_set:
        variable_rule_list = []
        for prule in prule_list:
            if prule.variable == variable:
                variable_rule_list.append(prule)
        rules_dictionary[variable] = variable_rule_list
    return PCFG(start_variable, rules_dictionary)


def get_sentences():
    data_text = open("data.txt")
    data_string = data_text.read()
    data_text.close()
    list_of_sentences = data_string.split('\n\n')
    return list_of_sentences


def main():
    original_pcfg = get_PCFG()
    near_cnf_pcfg = original_pcfg.to_near_cnf()
    sentences = get_sentences()
    for w in sentences:
        tree = near_cnf_pcfg[0].cky_parser(w)
        changes = near_cnf_pcfg[1]
        if tree == None:
            print('"' + w + '"', 'is not generated by the grammar.\n')
        else:
            print('Near CNF tree of', '"' + w + '":')
            print(tree)
            print('Original grammar tree:')
            print(near_cnf_pcfg[0].adjust_near_cnf_ptree(tree, changes), '\n')


if __name__ == "__main__":
    main()
    

